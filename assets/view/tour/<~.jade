extends lib/layout

block content
	section
		p.
			A #[+ms('Generator')] is a block of code that
			yields values to and recieves responses from a context.
		p A Fun returning a Generator! is written with #[code ~|] instead of #[code |].
		p (Or #[code ~!|] instead of #[code !|], #[code .~|] instead of #[code .|], or #[code .~!|] instead of #[code .!|].)

		p #[code <~], pronounced "yield", gives a value to the context.

	mason-editor
		pre.
			# The Stream context treats the yielded values as elements of a @.
			new Stream ~|
				<~ 1
				<~ 2
				<~ 3

	section
		p.
			More specifically, a #[code Generator] is a mutable value which
			the context calls the #[+ms('gen-next!')] method on,
			causing it to execute code up until the next yield.
		p.
			#[code gen-next!] could be called in an asynchronous callback,
			or the context could choose to stop calling the generator at all.
		p #[code Generator]s are useful when:
		ul
			li Code could run on-demand, for example yielding the values of a #[+ms('Stream')] above
			li Code could run asynchronously. For example, #[+ms('$ing')] lets you yield promises and recieve their results later.
			li There's some information you want threaded through everything via the context.
			li Your code has a side-effect (such as logging) that you want dealt with by the context rather than directly.

		p You can also recieve values back from the context.

	mason-editor
		pre.
			taking = |stream getter
				generator = getter()
				for stream
					value done = generator.next _
					if! done
						break value

			taking (new Range 0 10) ~|
				. <~
				. <~
				. <~

	section
		p #[code a <~ b] both sends a value to the context and takes one back.
		p It's the same as #[code a = <~ b].
		p Note that #[code (<~ 1)] is an expression and #[code a <~ 1] is a statement.

	mason-editor
		pre.
			# Interjects itself into assignments and increments the number.
			incrementing = |yields-numbers
				generator = yields-numbers()
				last-value ::= undefined
				for
					value done = gen-next! generator last-value
					if! done
						break value
					last-value := + 1 value

			incrementing ~|
				two <~ 1
				three <~ two
				<~ three

	section
		p #[code <~~], pronounced "yield-to", lets one generator delegate to another.

	mason-editor
		pre.
			yield-both = ~|a b
				<~ a
				<~ b
			new Stream ~|
				# This is equivalent to `<~~ (yield-both 1 2)`.
				# `<~~` only ever has the one "argument", which is another Generator! to yield to.
				<~~ yield-both 1 2
				<~~ yield-both 1 2
