- path = filename.match(/assets\/(.+).pug/)[1]
- fullTitle = path === 'index' ? 'mason' : `${path} - mason programming language`
- rootUrl = '//mason-lang.github.io'
- gitRoot = '//github.com/mason-lang'

- quote = '"'
- singleQuote = "'"

mixin request-for-comments()
	p.
		Have a comment about the language?
		#[a(href='//github.com/mason-lang/mason-compile/issues/new') Create an issue] or
		#[a(href='//gitter.im/mason-lang/mason-compile') Chat on gitter] or
		#[a(href='mailto:andy.pj.hanson@gmail.com') contact me directly].

mixin hdr(name, fullName)
	- fullName = fullName || name
	a(href=`/${path}#${name}`)
		h1(id=name)= fullName

mixin hdr2(name, fullName)
	- fullName = fullName || name
	a(href=`/${path}#${name}`)
		h2(id=name)= fullName

-
	//TODO: use builtins map for this
	var ms_s = {
		'!': '!',
		'@': '@.@',
		'$': '$',
		'$ing': '$',
		'--!': '@.@!',
		'++': '@.@',
		'++!': '@.@!',
		'=>': 'Type.Type',
		'?': '@.?',
		'Alias-Type': 'Type.Alias-Type',
		Bool: 'Type.primitive',
		'binary=?': 'compare',
		curry: 'Function',
		Deque: '@.Deque',
		'each!': '@.@',
		extract: 'Type.Type',
		'has-instance?': 'Type.Type',
		'?find': '@.@',
		'gen-next!': 'Generator',
		Generator: 'Generator',
		'Hash-Map!': '@.Map.Hash-Map',
		'Hash-Set': '@.Hash-Set',
		'Heap-Priority-Queue!': '@.Heap-Priority-Queue',
		identity: 'Function',
		'Id-Map!': '@.Map.Id-Map!',
		'id-memoize': 'Function',
		'Id-Set!': '@.Id-Set!',
		'impl!': 'Type.Method',
		'Impl-Type': 'Type.Impl-Type',
		iterator: '@.@',
		'js<<': 'js',
		'Lazy-Stream': '@.Lazy-Stream',
		LList: '@.LList',
		'@map': '@.@',
		Map: '@.Map.Map',
		Num: 'Type.primitive',
		'p': 'Object',
		'?p': 'Object',
		'?pop!': '@.Priority-Queue!',
		Poly: 'Type.Poly',
		'Pred-Type': 'Type.Pred-Type',
		Range: '@.Range',
		Record: 'Type.Record',
		send: 'Object',
		'self-impl!': 'Type.Method',
		Seq: '@.Seq',
		Str: 'Type.primitive',
		Sym: 'Type.primitive',
		sub: 'methods',
		Stream: '@.Stream',
		Trait: 'Type.Trait',
		'Type': 'Type.Type',
		'Weak-Id-Map!': '@.Map.Weak-Id-Map!',
		'Wrap-Type': 'Type.Wrap-Type'
	}
	var export_paths  = { }
	for (var key of Object.keys(ms_s)) {
		var url = ms_s[key]
		var rel_url = url.replace('.', '/')
		var escaped_url = rel_url.replace('@', '%40').replace('?', '%3F')
		export_paths[key] = `${gitRoot}/msl/tree/master/src/${escaped_url}.ms`
	}


mixin ms(name)
	-
		var url = export_paths[name]
		if (url === undefined) throw new Error(`No doc link for ${name}.`)
	a(href=url)= name

-
	var mdn_s = {
		Symbol: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol'
	}
mixin mdn(name)
	-
		var url = mdn_s[name]
		if (url === undefined) throw new Error(`No MDN link for ${name}.`)
	a(href=url)= name

mixin ms-project(name)
	a(href=`${gitRoot}/${name}`)= name
