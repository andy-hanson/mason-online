extends _layout

block content
	section
		p There are more types than just #[a(href='./class') classes and kinds].
		p The kind #[+ms('Type')] can be implemented by anything defining the method #[+ms('has-instance?')].
		p The colon #[code :] is special syntax for using #[code instanceof].
		.aside Currently it uses a shim because #[code Symbol.hasInstance] isn't yet implemented in any JS engine.
		p.
			When declaring a local, use #[code :] to assert its type.
			For function return types, write the type right after the #[code \].
		p The #[+ms('Str')] and #[+ms('Num')] builtins act like #[code String] and #[code Number] but recognize primitives instead of the rarely-used object versions. There's also #[+ms('Bool')] and #[+ms('Sym')].

	mason-editor
		pre.
			number->string = \:Str _:Num
				"#_"

			|| This should fail
			number->string []

	section
		p You can also use #[code value:Type] (with no spaces) to call #[code contains?].
		p For just #[code :Type], the test is on #[code _]. (This works great in #[code case] expressions!)

	mason-editor
		pre.
			. 1:Num
			. not 1:Str
			_ = "one"
			. not :Num
			. :Str

	+hdr('Pred-Type')

	section
		p Any predicate can become a Type.
		.aside.
			#[code name.] adds an object property equal to
			the current name being assigned to, in this case #[code "Three"].

	mason-editor
		pre.
			Three = new Pred-Type
				name.
				predicate. \_
					=? _ 3

			. 3:Three
			. 4:Three

	+hdr('prefix')
	section
		p Mason code often uses prefixes and suffixes to indicate type.
		p.
			The compiler doesn't treat these specially.
			#[+ms-project('msl')] follows this convention, but you don't have to.

	table
		thead
			tr
				td Looks like
				td Means
		tr
			td #[code ?a]
			td #[+ms('?')] #[span.aside option]
		tr
			td #[code $a]
			td #[+ms('$')] #[span.aside promise]
		tr
			td #[code @a]
			td #[+ms('@')] #[span.aside collection]
		tr
			td #[code a->b]
			td #[+ms('Map')] #[span.aside from a to b]
		tr
			td #[code a?]
			td #[+ms('Bool')]

	p An optional promise is #[code ?$a]; a promise for an option is #[code $?a].
	p #[code a!] indicates a function that performs some action rather than just returning a value.
