extends _layout

block content
	section
		p Mason supports JavaScript's generator functions.
		p.
			A generator function returns a generator object.
			This has a #[code next] method that runs code up until the next #[code yield] and returns.
		p So, functions can look like normal code but actually be full of continuations.
		p For a JS-style overview, see #[a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator') here].

	section
		p Generator functions should be marked with #[code *|].
		p We've also seen #[code .] and #[code !] prepended to #[code |].
		p The order of function markers is:
		ul
			li #[code .] #[span.aside has newly bound #[code this]]
			li #[code *] #[span.aside is a generator function]
			li #[code !] #[span.aside does not return any value]
		p , all of them optional.

	section
		p #[code yield] can get values from the context:

	mason-editor
		pre.
			|| If these generator context functions are confusing, relax.
			|| You'll probably never have to write one yourself.
			taking = |@vals generator-func
				generator = generator-func()
				value done = generator.next()
				cond done value for @vals
					value done = generator.next _
					if done
						break value

			taking 0..2 *|
				. yield
				. yield
				. yield

	section
		p It can also send values back to the context.

	mason-editor
		pre.
			|| Injects itself into assignments and increments the number.
			incrementing = |yields-numbers
				generator = yields-numbers()
				last-value = undefined
				for
					value done = generator.next last-value
					if done
						break value
					last-value := + 1 value

			incrementing *|
				two = yield 1
				three = yield two
				yield three

	section
		p #[code yield*] delegates to another generator.

	mason-editor
		pre.
			yield-both = *!|a b
				yield a
				yield b
			new Stream *!|
				yield* yield-both 1 2
				yield* yield-both 3 4
