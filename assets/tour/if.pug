extends _layout

block content
	+hdr('if')

	section
		p #[code if] and #[code unless] return a value only when their condition is true.
		p When used as expressions, these are #[+ms('?')] values.
		p These parse specially; if a block is present, it always goes with the #[code if], even if there's another keyword in between.

	mason-editor
		pre.
			. if true 0
			. if (or true false) 1
			|| Thanks to special parsing, this is `unless (not true) 2`, not `unless (not true 2)`.
			. unless not true
				2
			. unless and true false
				3

	section
		p There is no #[code else] expression to go with #[code if]; use #[code cond] or #[code case] (both below) instead.

	+hdr('cond')
	section
		p For simple conditionals, use #[code cond]. This is like JavaScript's ternary operator.
		p Like anything else, the "else" value can go in a block. What if you want blocks for both "then" and "else"? Use #[a(href='#case') #[code case]].

	mason-editor
		pre.
			. cond true 'then 'else
			. cond false 'then
				'else

	+hdr('switch')
	section
		p This is just like JavaScript's.
		p You don't need to #[code break] explicitly. Fallthrough is not supported.
		p To handle multiple cases the same way, just write multiple values on one line.
		p #[code else] handles anything not covered by another case.

	mason-editor
		pre.
			f = \n
				switch n
					0
						"zero"
					1 2
						"a small number"
					else
						"some other number"
			. f 0
			. f 1
			. f 2
			. f 3

	section
		p If there is no #[code else], an error will be thrown for an unhandled case.
		p (If you really want to do nothing, just write #[code pass] in the #[code else] block.)

	+hdr('focus')
	section
		p.
			The focus, #[code _], is a good short-lived variable when you don't need a name.
		p There's some helpful syntax for using it:
		ul
			li Many expressions implicitly assign to the focus.
			li #[code fun_] is short for #[code (fun _)].
			li #[code :Type] is short for #[code _:Type]. (See #[a(href='./type') types])

	+hdr('case')
	section
		p #[code case] is Mason's replacement JS's #[code if ... else if ... else].
		p Tests are tried from top to bottom until one matches.
		p Tests are each written on their own line, with the result for that test in a block next to it.
		p Just like #[code switch], a missing #[code else] will throw an error.
		p An expression written on the same line as #[code case] on the same line will become the focus. This is optional but recommended.

	mason-editor
		pre.
			rate-guess = \guess
				case guess
					|| implicitly, `_ = guess`
					&lt? _ 7
						"Too low!"
					&gt? _ 7
						"Too high!"
					else
						"You got it!"

			. rate-guess 6
			. rate-guess 8
			. rate-guess 7

	section
		p  #[code \case] and #[code \switch] create functions with a single implicit argument: #[code _].

	mason-editor
		pre.
			rate-guess = \case
				=? _ 7
					"You got it!"
				else
					"Off by #(- _ 7)"

			. rate-guess 1337

			rate-guess-2 = \switch
				7
					"You got it!"

			. rate-guess-2 7
