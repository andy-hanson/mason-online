extends _layout

block content
	+hdr('for')
	section
		p #[code for] allows for simple loops.
		p #[code break] alone will end the loop.

	mason-editor
		pre.
			n = 0
			for
				n := + 1 n
				if =? n 5
					break
			n

	section
		p Loops can be values instead of statements.
		p Just provide a value to #[code break].

	mason-editor
		pre.
			n = 0
			for
				n := + 1 n
				if =? n 10
					break n

	section
		p You can also loop over a collection.
		p If you provide no element name, it will be the #[a(href='./if#focus') focus].

	mason-editor
		pre.
			. 0
			for n of 1..3
				. n
			for 4..99
				. _
				if =? _ 5
					break

	+hdr('@for')
	section
		p Often you want to create a collection from a loop.
		p Just use #[code @for] and the whole loop will be a builder.

	mason-editor
		pre.
			@for [1 2 3 4]
				if divisible? _ 2
					. _

	section
		p.
			If you're #[em not] writing a complicated block,
			consider using functions like #[+ms('each!')] and #[+ms('@map')],
			combined with #[a(href='./misc#&') &],
			to fit it all on one line.

	mason-editor
		pre.
			. @map ['foo 'bar 'baz] &toUpperCase
			. @keep [1 2 3 4] &(divisible? _ 2)

	section
		.aside There's also a third kind of loop, #[a(href='./async#$for') $for]!
