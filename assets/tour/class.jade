extends _layout

block content
	section
		p #[code class] creates a JavaScript class.
		p The class body consists of a constructor followed by method definitions.
		p You can use computed method names with #[code ()]. This allows you to implement #[code poly]s.

	mason-editor
		pre.
			dimension = poly \
				abstract

			|| If superclass is missing, it will be Object, so this is just for show.
			Point = class
				construct x y
					.x := x
					.y := y

				|| This implements the builtin `to-string` method.
				|| Any expression can go within the parentheses;
				|| if it's a method, its `symbol` property will be fetched.
				(dimension) \
					2

				transpose! !\
					{x y} = this
					.y := x
					.x := y

			p = new Point 1 2
			. dimension p
			p.transpose!()
			. p

	+hdr2('static')

	section
		p.
			A #[code do] block sets #[code _] to the class and lets you do anything with it.
			#[span.aside= "These usually aren't needed."]
		p #[code static] defines static methods.
		p Constructor arguments prefixed with #[code .] become properties.

	mason-editor
		pre.
			Point = class
				do
					_.origin := new _ 0 0

				static
					|| `empty` is a builtin poly
					(empty) \
						.origin

					from-array \arr
						new Point arr[0] arr[1]

				construct .x .y
					pass

			. empty Point
			. Point.from-array [1 2]

	p.
		The parts of a class #[strong must] come in this order:
		#[code do], #[code static], #[code construct], then methods.

	+hdr2('get / set')

	section
		p Getters and setters are also supported.

	mason-editor
		pre.
			Point = class
				construct x y
					.x := x
					.y := y

				get len
					Math.sqrt + (** .x 2) ** .y 2

				|| Setter has `_` as its implicit parameter.
				set len
					scale = / _ .len
					.x := * .x scale
					.y := * .y scale

			p = new Point 3 4
			. p.len
			p.len := 25
			. p

	+hdr2('my')

	section
		p When you don't intend a method to be used by others, just put #[code my] in front.
		p This works on all kinds, including get/set.
		p #[code my] doesn't actually do anything, but #[+ms-project('mason-doc')] is planned to use that information.

	mason-editor
		pre.
			Bouncer = class
				allow-entry? \guess
					=? guess .password

				my get password
					'swordfish

			_ = new Bouncer
			. _.allow-entry? 'abc123
			|| not actually secret
			. _.allow-entry? _.password

	+hdr2('super')

	section
		p Class inheritance works the same as in JavaScript.
		p Declare the superclass by writing it after the #[code class].
		p.
			The constructor of an inherited class must call #[code super]
			before attempting to access #[code this].
		p.
			You can use #[code super] in methods to call the same method on a super class,
			or #[code super.foo] to call a different method.
		p Like in JavaScript, static methods are inherited.

	mason-editor
		pre.
			A = class
				static
					get super-static
						4

				construct foo
					.foo := 0

				super-method \
					1

				overridden-method \x
					x

			B = class extends A
				construct
					|| Illegal to write to `.bar` here
					super()
					|| It's OK after you've called `super`
					.bar := 1

				overridden-method \x
					+ (super x) .bar

				other-method \x
					super.overridden-method x

			b = new B
			. b.foo
			. b.super-method()
			. b.overridden-method 1
			. b.other-method 3
			. B.super-static

	+hdr2('record')

	section
		p If a class is just a container for various fields, there's an easy record syntax.

	mason-editor
		pre.
			Point = class x y
				|| Can still put method definitions here.
				get transpose
					new Point .y .x

			(new Point 1 2).transpose

	section
		p The class will inherit from the #[+ms('Record')] trait (traits are up next!).
		p Records can be #[a(href='./pattern') pattern matched]. They also have a default #[code #{singleQuote}toString].
