extends _lib/layout

block content
	+hdr('start')
	section
		p.
			Even if you plan to use mason only in the browser,
			you'll still need to install #[a(href='//nodejs.org') node.js].
		p To test out your node installation, try running this:
		pre.command.
			mkdir test; cd test
			sudo npm install -g mason-lang/mason-cli
			npm install amdefine mason-lang/msl
			echo 'console.log "hello world!"' > hello.ms
			mason run hello.ms
		p #[+ms-project('mason-cli')] is good for scripts, and will compile any other #[code .ms] files you import, but for projects you should use a build tool.

	+hdr('build')
	section
		p Mason does not come with a build tool. But it works with many:
		ul
			li #[+ms-project('gulp-mason')] #[span.aside recommended]
			li #[+ms-project('broccoli-mason')]
			li #[+ms-project('jstransformer-mason')] #[span.aside for #[a(href='//dum-build.org') dum], a build tool written in Mason]

	+hdr('options')
	section
		p The build tools all use the same options:

	+hdr2('mslPath')
	section
		p Path to #[code msl]. You'll want to set this to #[code msl/lib], but it defaults to #[code msl].
		p So annoying... This option will go away soon.

	+hdr2('indent')
	section
		p This defaults to #[code \t]. You can set it to #[code 2] or #[code 4] (or any other number) to use that many spaces for indentation.

	+hdr2('language')
	section
		p Currently this can only be #[code 'english'].

	+hdr('edit')
	section
		p Mason syntaxes exist for these text editors:
		ul
			li #[+ms-project('mason-atom')] for #[a(href='//atom.io') atom]
			li #[+ms-project('mason-tmLanguage')] for #[a(href='//sublimetext.com') sublime], #[a(href='//code.visualstudio.com') vscode], and #[a(href='//macromates.com') textmate]
