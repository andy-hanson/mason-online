{"version":3,"sources":["private/parse/parseCase.js"],"names":[],"mappings":"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","file":"private/parse/parseCase.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'op/Op', '../ast/Case', '../ast/locals', '../token/Group', '../token/Keyword', './checks', './parseBlock', './parseExpr', './parseLocalDeclares', './parseSpaced', './Slice'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Op_1 = require('op/Op');\n    const Case_1 = require('../ast/Case');\n    const locals_1 = require('../ast/locals');\n    const Group_1 = require('../token/Group');\n    const Keyword_1 = require('../token/Keyword');\n    const checks_1 = require('./checks');\n    const parseBlock_1 = require('./parseBlock');\n    const parseExpr_1 = require('./parseExpr');\n    const parseLocalDeclares_1 = require('./parseLocalDeclares');\n    const parseSpaced_1 = require('./parseSpaced');\n    const Slice_1 = require('./Slice');\n    function parseCase(tokens) {\n        const [before, block] = parseBlock_1.beforeAndBlock(tokens);\n        const opCased = Op_1.opMap(parseExpr_1.opParseExpr(before), _ => locals_1.AssignSingle.focus(_.loc, _));\n        const { parts, opElse } = parseCaseParts(block);\n        return new Case_1.default(tokens.loc, opCased, parts, opElse);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseCase;\n    function parseCaseFun(loc, lines) {\n        const { parts, opElse } = parseCaseParts(lines);\n        return new Case_1.default(loc, null, parts, opElse);\n    }\n    exports.parseCaseFun = parseCaseFun;\n    function parseCaseParts(block) {\n        return parseCaseSwitchParts(block, (loc, before, block) => new Case_1.CasePart(loc, parseCaseTest(before), block));\n    }\n    function parseCaseTest(tokens) {\n        const first = tokens.head();\n        if (first instanceof Group_1.GroupSpace && tokens.size() > 1) {\n            const ft = Slice_1.Tokens.of(first);\n            if (Keyword_1.isKeyword(38, ft.head())) {\n                const type = parseSpaced_1.default(ft.tail());\n                const locals = parseLocalDeclares_1.default(tokens.tail());\n                return new Case_1.Pattern(tokens.loc, type, locals);\n            }\n        }\n        return parseExpr_1.default(tokens);\n    }\n    function parseCaseSwitchParts(block, ctr) {\n        const [partLines, opElse] = takeOpElseFromEnd(block);\n        const parts = partLines.mapSlices(line => {\n            const [before, block] = parseBlock_1.beforeAndBlock(line);\n            return ctr(line.loc, before, parseBlock_1.default(block));\n        });\n        return { parts: parts, opElse: opElse };\n    }\n    exports.parseCaseSwitchParts = parseCaseSwitchParts;\n    function takeOpElseFromEnd(block) {\n        const lastLine = block.lastSlice();\n        const [partLines, opElse] = Keyword_1.isKeyword(43, lastLine.head()) ?\n            [block.rtail(), parseBlock_1.parseJustBlock(43, lastLine.tail())] :\n            [block, null];\n        checks_1.checkNonEmpty(partLines, _ => _.caseSwitchNeedsParts);\n        return [partLines, opElse];\n    }\n});\n"],"sourceRoot":"/source/"}