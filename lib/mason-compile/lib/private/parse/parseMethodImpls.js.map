{"version":3,"sources":["private/parse/parseMethodImpls.js"],"names":[],"mappings":"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","file":"private/parse/parseMethodImpls.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../ast/classTraitCommon', '../context', '../token/Keyword', './parseBlock', './parseFunBlock', './parseMemberName', './parseMethodSplit'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const classTraitCommon_1 = require('../ast/classTraitCommon');\n    const context_1 = require('../context');\n    const Keyword_1 = require('../token/Keyword');\n    const parseBlock_1 = require('./parseBlock');\n    const parseFunBlock_1 = require('./parseFunBlock');\n    const parseMemberName_1 = require('./parseMemberName');\n    const parseMethodSplit_1 = require('./parseMethodSplit');\n    function parseMethodImpls(lines) {\n        return lines.mapSlices(parseMethodImpl);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseMethodImpls;\n    function takeStatics(lines) {\n        if (lines.isEmpty())\n            return [[], lines];\n        else {\n            const line = lines.headSlice();\n            return Keyword_1.isKeyword(57, line.head()) ?\n                [parseMethodImpls(parseBlock_1.justBlock(57, line.tail())), lines.tail()] :\n                [[], lines];\n        }\n    }\n    exports.takeStatics = takeStatics;\n    function parseStaticsAndMethods(lines) {\n        const [statics, rest] = takeStatics(lines);\n        return [statics, parseMethodImpls(rest)];\n    }\n    exports.parseStaticsAndMethods = parseStaticsAndMethods;\n    function opTakeDo(lines) {\n        const line = lines.headSlice();\n        return Keyword_1.isKeyword(40, line.head()) ?\n            [new classTraitCommon_1.ClassTraitDo(line.loc, parseBlock_1.parseJustBlock(40, line.tail())), lines.tail()] :\n            [null, lines];\n    }\n    exports.opTakeDo = opTakeDo;\n    function parseMethodImpl(tokens) {\n        const [[isMy, isVirtual, isOverride], rest] = tokens.takeKeywords(52, 60, 54);\n        const kind = methodKind(tokens.loc, isMy, isVirtual, isOverride);\n        const head = rest.head();\n        if (isGetSet(head)) {\n            const [before, block] = parseBlock_1.beforeAndBlock(rest.tail());\n            const ctr = head.kind === 47 ? classTraitCommon_1.MethodGetter : classTraitCommon_1.MethodSetter;\n            return new ctr(rest.loc, parseMethodName(before), parseBlock_1.default(block), kind);\n        }\n        else {\n            const { before, options, after } = parseMethodSplit_1.default(rest);\n            const fun = parseFunBlock_1.default(options, after);\n            return new classTraitCommon_1.MethodImpl(rest.loc, parseMethodName(before), fun, kind);\n        }\n    }\n    function methodKind(loc, isMy, isVirtual, isOverride) {\n        context_1.check(!(isMy && isOverride), loc, _ => _.noMyOverride);\n        const m = isMy ? 0b100 : 0;\n        const v = isVirtual ? 0b010 : 0;\n        const o = isOverride ? 0b001 : 0;\n        return m | v | o;\n    }\n    function isGetSet(token) {\n        if (token instanceof Keyword_1.KeywordPlain)\n            return token.kind === 47 || token.kind === 56;\n        else\n            return null;\n    }\n    function parseMethodName(tokens) {\n        context_1.check(tokens.size() === 1, tokens.loc, _ => _.methodName);\n        return parseMemberName_1.default(tokens.head());\n    }\n});\n"],"sourceRoot":"/source/"}