{"version":3,"sources":["private/parse/tryTakeComment.js"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,gBAAvB,EAAyC,SAAzC,CAAP,EAA4D,OAA5D,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;AAE3B,UAAM,UAAU,QAAQ,gBAAR,CAAV,CAFqB;AAG3B,UAAM,SAAS,QAAQ,SAAR,CAAT,CAHqB;AAI3B,aAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC3B,cAAM,WAAW,EAAX,CADqB;AAE3B,YAAI,OAAO,KAAP,CAFuB;AAG3B,eAAO,CAAC,KAAK,OAAL,EAAD,EAAiB;AACpB,kBAAM,KAAK,KAAK,SAAL,EAAL,CADc;AAEpB,kBAAM,IAAI,GAAG,IAAH,EAAJ,CAFc;AAGpB,gBAAI,aAAa,QAAQ,UAAR,EAAoB;AACjC,uBAAO,MAAP,CAAc,GAAG,IAAH,OAAc,CAAd,CAAd,CADiC;AAEjC,yBAAS,IAAT,CAAc,CAAd,EAFiC;AAGjC,uBAAO,KAAK,IAAL,EAAP,CAHiC;aAArC,MAMI,MANJ;SAHJ;AAWA,eAAO,CAAC,OAAO,OAAP,CAAe,QAAf,IAA2B,IAA3B,GAAkC,SAAS,GAAT,CAAa,KAAK,EAAE,IAAF,CAAlB,CAA0B,IAA1B,CAA+B,IAA/B,CAAlC,EAAwE,IAAzE,CAAP,CAd2B;KAA/B;AAgBA,WAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C,EAAE,OAAO,IAAP,EAA/C,EApB2B;AAqB3B,YAAQ,OAAR,GAAkB,cAAlB,CArB2B;CAA5B,CAPH","file":"private/parse/tryTakeComment.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../token/Token', '../util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Token_1 = require('../token/Token');\n    const util_1 = require('../util');\n    function tryTakeComment(lines) {\n        const comments = [];\n        let rest = lines;\n        while (!rest.isEmpty()) {\n            const hs = rest.headSlice();\n            const h = hs.head();\n            if (h instanceof Token_1.DocComment) {\n                util_1.assert(hs.size() === 1);\n                comments.push(h);\n                rest = rest.tail();\n            }\n            else\n                break;\n        }\n        return [util_1.isEmpty(comments) ? null : comments.map(_ => _.text).join('\\n'), rest];\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = tryTakeComment;\n});\n"],"sourceRoot":"/source/"}