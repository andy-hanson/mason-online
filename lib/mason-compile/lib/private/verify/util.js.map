{"version":3,"sources":["private/verify/util.js","private/verify/util.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,YAAvB,EAAqC,WAArC,CAAP,EAA0D,OAA1D,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,UAAA,YAAA,QAAoB,YAApB,CAAA,CDK+B;ACH/B,UAAA,YAAA,QAAwC,WAAxC,CAAA,CDG+B;ACA/B,aAAA,eAAA,CAAgC,YAAhC,EAA0D;AACzD,kBAAA,UAAA,CAAW,GAAX,CAAe,YAAf,EADyD;KAA1D;AAAgB,YAAA,eAAA,GAAe,eAAf,CDAe;ACQ/B,aAAA,sBAAA,CAAuC,YAAvC,EAAiE;AAChE,YAAI,aAAa,IAAb,KAAsB,GAAtB,EACH,gBAAgB,YAAhB,EADD;KADD;AAAgB,YAAA,sBAAA,GAAsB,sBAAtB,CDRe;ACa/B,aAAA,OAAA,CAAwB,IAAxB,EAAmC;AAClC,kBAAA,OAAA,CAAQ,KAAR,CAAc,GAAd,CAAkB,IAAlB,EAAwB,UAAA,IAAA,CAAxB,CADkC;KAAnC;AAAgB,YAAA,OAAA,GAAO,OAAP,CDbe;ACiB/B,aAAA,aAAA,CAA8B,OAA9B,EAAqD,YAArD,EAA0F;AACzF,kBAAA,KAAA,CAAM,CAAC,QAAQ,MAAR,EAAgB,QAAQ,GAAR,EAAa,YAApC,EADyF;KAA1F;AAAgB,YAAA,aAAA,GAAa,aAAb,CDjBe;CAA5B,CAPH","file":"private/verify/util.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../context', './context'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const context_1 = require('../context');\n    const context_2 = require('./context');\n    function makeUseOptional(localDeclare) {\n        context_2.okToNotUse.add(localDeclare);\n    }\n    exports.makeUseOptional = makeUseOptional;\n    function makeUseOptionalIfFocus(localDeclare) {\n        if (localDeclare.name === '_')\n            makeUseOptional(localDeclare);\n    }\n    exports.makeUseOptionalIfFocus = makeUseOptionalIfFocus;\n    function setName(expr) {\n        context_2.results.names.set(expr, context_2.name);\n    }\n    exports.setName = setName;\n    function verifyNotLazy(declare, errorMessage) {\n        context_1.check(!declare.isLazy, declare.loc, errorMessage);\n    }\n    exports.verifyNotLazy = verifyNotLazy;\n});\n","import {LocalDeclare} from '../ast/locals'\nimport Named from '../ast/Named'\nimport {check} from '../context'\nimport Language from '../languages/Language'\nimport {name, okToNotUse, results} from './context'\n\n/** Mark a LocalDeclare as OK to not use. */\nexport function makeUseOptional(localDeclare: LocalDeclare): void {\n\tokToNotUse.add(localDeclare)\n}\n\n/**\nFor Asts that use the focus by default, make it OK to not use the variable when it's the focus.\n(If the user specified a name, they intended to use it.)\n*/\nexport function makeUseOptionalIfFocus(localDeclare: LocalDeclare): void {\n\tif (localDeclare.name === '_')\n\t\tmakeUseOptional(localDeclare)\n}\n\nexport function setName(expr: Named): void {\n\tresults.names.set(expr, name)\n}\n\nexport function verifyNotLazy(declare: LocalDeclare, errorMessage: (_: Language) => string): void {\n\tcheck(!declare.isLazy, declare.loc, errorMessage)\n}\n"],"sourceRoot":"/source/"}