{"version":3,"sources":["private/transpile/transpileCase.js"],"names":[],"mappings":"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","file":"private/transpile/transpileCase.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Declaration', 'esast/lib/Expression', 'esast/lib/Identifier', 'esast/lib/Literal', 'esast/lib/Statement', 'op/Op', '../ast/Case', './esast-constants', './ms', './throwErrorFromString', './transpileBlock', './transpileLocals', './transpileVal', './util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Declaration_1 = require('esast/lib/Declaration');\n    const Expression_1 = require('esast/lib/Expression');\n    const Identifier_1 = require('esast/lib/Identifier');\n    const Literal_1 = require('esast/lib/Literal');\n    const Statement_1 = require('esast/lib/Statement');\n    const Op_1 = require('op/Op');\n    const Case_1 = require('../ast/Case');\n    const esast_constants_1 = require('./esast-constants');\n    const ms_1 = require('./ms');\n    const throwErrorFromString_1 = require('./throwErrorFromString');\n    const transpileBlock_1 = require('./transpileBlock');\n    const transpileLocals_1 = require('./transpileLocals');\n    const transpileVal_1 = require('./transpileVal');\n    const util_1 = require('./util');\n    function transpileCaseValNoLoc({ opCased, parts, opElse }) {\n        const body = caseBody(parts, opElse);\n        const block = Op_1.caseOp(opCased, _ => [transpileLocals_1.transpileAssignSingle(_), body], () => [body]);\n        return transpileBlock_1.blockWrap(new Statement_1.BlockStatement(block));\n    }\n    exports.transpileCaseValNoLoc = transpileCaseValNoLoc;\n    function transpileCaseDoNoLoc({ opCased, parts, opElse }) {\n        const body = caseBody(parts, opElse);\n        return Op_1.caseOp(opCased, _ => new Statement_1.BlockStatement([transpileLocals_1.transpileAssignSingle(_), body]), () => body);\n    }\n    exports.transpileCaseDoNoLoc = transpileCaseDoNoLoc;\n    function caseBody(parts, opElse) {\n        let acc = Op_1.caseOp(opElse, transpileBlock_1.default, () => throwNoCaseMatch);\n        for (let i = parts.length - 1; i >= 0; i = i - 1)\n            acc = transpileCasePart(parts[i], acc);\n        return acc;\n    }\n    function transpileCasePart(_, alternate) {\n        const { test, result } = _;\n        return util_1.loc(_, (() => {\n            if (test instanceof Case_1.Pattern) {\n                const { type, locals } = test;\n                const decl = transpileLocals_1.plainLet(idExtract, ms_1.msCall('extract', transpileVal_1.default(type), esast_constants_1.idFocus, new Literal_1.LiteralNumber(locals.length)));\n                const testExtract = new Expression_1.BinaryExpression('!==', idExtract, esast_constants_1.litNull);\n                const extract = new Declaration_1.VariableDeclarationLet(locals.map((_, index) => new Declaration_1.VariableDeclarator(transpileLocals_1.idForDeclareCached(_), new Expression_1.MemberExpressionComputed(idExtract, new Literal_1.LiteralNumber(index)))));\n                const res = transpileBlock_1.default(result, { lead: extract });\n                return new Statement_1.BlockStatement([decl, new Statement_1.IfStatement(testExtract, res, alternate)]);\n            }\n            else\n                return new Statement_1.IfStatement(transpileVal_1.default(test), transpileBlock_1.default(result), alternate);\n        })());\n    }\n    const idExtract = new Identifier_1.default('_$');\n    const throwNoCaseMatch = throwErrorFromString_1.default('No branch of `case` matches.');\n});\n"],"sourceRoot":"/source/"}