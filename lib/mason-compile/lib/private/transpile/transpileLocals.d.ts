import { VariableDeclarationLet, VariableDeclarator } from 'esast/lib/Declaration';
import Expression from 'esast/lib/Expression';
import Identifier from 'esast/lib/Identifier';
import Statement from 'esast/lib/Statement';
import Op from 'op/Op';
import { Assign, AssignSingle, LocalAccess, LocalDeclare, LocalMutate } from '../ast/locals';
export declare function transpileLocalDeclare(_: LocalDeclare): Identifier;
export declare function transpileLocalAccessNoLoc(_: LocalAccess): Expression;
export declare function accessLocalDeclare(localDeclare: LocalDeclare): Expression;
export declare function idForDeclareCached(localDeclare: LocalDeclare): Identifier;
export declare function opTypeCheckForLocalDeclare(localDeclare: LocalDeclare): Op<Statement>;
export declare function makeDeclare(localDeclare: LocalDeclare, val: Expression): VariableDeclarationLet;
export declare function plainLet(identifier: Identifier, value: Expression): VariableDeclarationLet;
export declare function plainLetForDeclare(declare: LocalDeclare, value: Expression): VariableDeclarationLet;
export declare function makeDeclarator(assignee: LocalDeclare, value: Expression, valueIsAlreadyLazy: boolean): VariableDeclarator;
export declare function makeDestructureDeclarators(assignees: Array<LocalDeclare>, isLazy: boolean, value: Expression, isModule: boolean): Array<VariableDeclarator>;
export declare function transpileAssignNoLoc(_: Assign): Statement;
export declare function transpileAssignSingle(_: AssignSingle): Statement;
export declare function transpileAssignSingleNoLoc({assignee, value}: AssignSingle, valWrap?: (_: Expression) => Expression): Statement;
export declare function transpileLocalMutateNoLoc({name, value}: LocalMutate): Statement;
