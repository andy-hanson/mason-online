{"version":3,"sources":["private/transpile/esast-constants.js","private/transpile/esast-constants.ts"],"names":[],"mappings":"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","file":"private/transpile/esast-constants.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Declaration', 'esast/lib/Expression', 'esast/lib/Identifier', 'esast/lib/Literal', 'esast/lib/ObjectExpression', 'esast/lib/Statement', 'esast-create-util/lib/util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Declaration_1 = require('esast/lib/Declaration');\n    const Expression_1 = require('esast/lib/Expression');\n    const Identifier_1 = require('esast/lib/Identifier');\n    const Literal_1 = require('esast/lib/Literal');\n    const ObjectExpression_1 = require('esast/lib/ObjectExpression');\n    const Statement_1 = require('esast/lib/Statement');\n    const util_1 = require('esast-create-util/lib/util');\n    exports.esGlobalError = new Identifier_1.default('Error'), exports.idBuilt = new Identifier_1.default('built'), exports.idError = new Identifier_1.default('Error'), exports.idFocus = new Identifier_1.default('_'), exports.idLexicalThis = new Identifier_1.default('_this'), exports.litNull = new Literal_1.LiteralNull(), exports.litUndefined = new Expression_1.UnaryExpression('void', new Literal_1.LiteralNumber(0)), exports.returnFocus = new Statement_1.ReturnStatement(exports.idFocus), exports.esThis = new Expression_1.ThisExpression(), exports.declareBuiltBag = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.idBuilt, new Expression_1.ArrayExpression([]))]), exports.declareBuiltMap = new Declaration_1.VariableDeclarationLet([\n        new Declaration_1.VariableDeclarator(exports.idBuilt, new Expression_1.NewExpression(util_1.member(new Identifier_1.default('global'), 'Map'), []))]), exports.declareBuiltObj = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.idBuilt, new ObjectExpression_1.default([]))]), exports.declareLexicalThis = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.idLexicalThis, exports.esThis)]), exports.letLexicalThis = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.idLexicalThis)]), exports.setLexicalThis = new Statement_1.ExpressionStatement(new Expression_1.AssignmentExpression('=', exports.idLexicalThis, exports.esThis));\n});\n","import {VariableDeclarationLet, VariableDeclarator} from 'esast/lib/Declaration'\nimport {ArrayExpression, AssignmentExpression, NewExpression, ThisExpression, UnaryExpression\n\t} from 'esast/lib/Expression'\nimport Identifier from 'esast/lib/Identifier'\nimport {LiteralNull, LiteralNumber} from 'esast/lib/Literal'\nimport ObjectExpression from 'esast/lib/ObjectExpression'\nimport {ExpressionStatement, ReturnStatement} from 'esast/lib/Statement'\nimport {member} from 'esast-create-util/lib/util'\n\nexport const\n\tesGlobalError = new Identifier('Error'),\n\tidBuilt = new Identifier('built'),\n\tidError = new Identifier('Error'),\n\tidFocus = new Identifier('_'),\n\tidLexicalThis = new Identifier('_this'),\n\tlitNull = new LiteralNull(),\n\tlitUndefined = new UnaryExpression('void', new LiteralNumber(0)),\n\treturnFocus = new ReturnStatement(idFocus),\n\tesThis = new ThisExpression(),\n\n\tdeclareBuiltBag = new VariableDeclarationLet(\n\t\t[new VariableDeclarator(idBuilt, new ArrayExpression([]))]),\n\tdeclareBuiltMap = new VariableDeclarationLet([\n\t\tnew VariableDeclarator(\n\t\t\tidBuilt,\n\t\t\tnew NewExpression(member(new Identifier('global'), 'Map'), []))]),\n\tdeclareBuiltObj = new VariableDeclarationLet(\n\t\t[new VariableDeclarator(idBuilt, new ObjectExpression([]))]),\n\n\tdeclareLexicalThis = new VariableDeclarationLet(\n\t\t[new VariableDeclarator(idLexicalThis, esThis)]),\n\tletLexicalThis = new VariableDeclarationLet([new VariableDeclarator(idLexicalThis)]),\n\tsetLexicalThis = new ExpressionStatement(new AssignmentExpression('=', idLexicalThis, esThis))\n"],"sourceRoot":"/source/"}