{"version":3,"sources":["private/transpile/transpileBooleans.js"],"names":[],"mappings":";;AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,sBAAvB,EAA+C,qBAA/C,EAAsE,cAAtE,EAAsF,MAAtF,EAA8F,kBAA9F,EAAkH,gBAAlH,CAAP,EAA4I,OAA5I,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;AAE3B,UAAM,eAAe,QAAQ,sBAAR,CAAf,CAFqB;AAG3B,UAAM,cAAc,QAAQ,qBAAR,CAAd,CAHqB;AAI3B,UAAM,UAAU,QAAQ,cAAR,CAAV,CAJqB;AAK3B,UAAM,OAAO,QAAQ,MAAR,CAAP,CALqB;AAM3B,UAAM,mBAAmB,QAAQ,kBAAR,CAAnB,CANqB;AAO3B,UAAM,iBAAiB,QAAQ,gBAAR,CAAjB,CAPqB;AAQ3B,aAAS,2BAAT,CAAqC,CAArC,EAAwC;cAC5B,OAA2B,EAA3B,KAD4B;cACtB,SAAqB,EAArB,OADsB;cACd,WAAa,EAAb,SADc;;AAEpC,cAAM,UAAU,eAAe,OAAf,CAAuB,IAAvB,CAAV,CAF8B;AAGpC,eAAO,IAAI,YAAY,WAAZ,CAAwB,WAAW,IAAI,aAAa,eAAb,CAA6B,GAAjC,EAAsC,OAAtC,CAAX,GAA4D,OAA5D,EAAqE,kBAAkB,QAAQ,OAAR,GACtH,iBAAiB,gBAAjB,CAAkC,MAAlC,CADoG,GAEpG,IAAI,YAAY,mBAAZ,CAAgC,eAAe,OAAf,CAAuB,MAAvB,CAApC,CAFoG,CAAxG,CAHoC;KAAxC;AAOA,YAAQ,2BAAR,GAAsC,2BAAtC,CAf2B;AAgB3B,aAAS,4BAAT,CAAsC,CAAtC,EAAyC;cAC7B,OAA2B,EAA3B,KAD6B;cACvB,SAAqB,EAArB,OADuB;cACf,WAAa,EAAb,SADe;;AAErC,cAAM,YAAY,KAAK,MAAL,CAAY,MAAZ,EAAoB,iBAAiB,gBAAjB,CAAkC,MAAlC,CAApB,CAAZ,CAF+B;;mBAGX,WAAW,CAAC,IAAD,EAAO,SAAP,CAAX,GAA+B,CAAC,SAAD,EAAY,IAAZ,CAA/B,CAHW;;;;cAG9B,kBAH8B;cAGtB,mBAHsB;;AAIrC,eAAO,IAAI,aAAa,qBAAb,CAAmC,eAAe,OAAf,CAAuB,IAAvB,CAAvC,EAAqE,MAArE,EAA6E,OAA7E,CAAP,CAJqC;KAAzC;AAMA,YAAQ,4BAAR,GAAuC,4BAAvC,CAtB2B;AAuB3B,UAAM,OAAO,KAAK,QAAL,CAAc,MAAd,CAAP,CAvBqB;AAwB3B,aAAS,kBAAT,QAAuD;YAAzB,kBAAyB;YAAnB,sBAAmB;YAAX,wBAAW;;AACnD,eAAO,IAAI,aAAa,qBAAb,CAAmC,eAAe,OAAf,CAAuB,IAAvB,CAAvC,EAAqE,eAAe,OAAf,CAAuB,MAAvB,CAArE,EAAqG,eAAe,OAAf,CAAuB,OAAvB,CAArG,CAAP,CADmD;KAAvD;AAGA,YAAQ,kBAAR,GAA6B,kBAA7B,CA3B2B;CAA5B,CAPH","file":"private/transpile/transpileBooleans.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Expression', 'esast/lib/Statement', '../ast/Block', './ms', './transpileBlock', './transpileVal'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Expression_1 = require('esast/lib/Expression');\n    const Statement_1 = require('esast/lib/Statement');\n    const Block_1 = require('../ast/Block');\n    const ms_1 = require('./ms');\n    const transpileBlock_1 = require('./transpileBlock');\n    const transpileVal_1 = require('./transpileVal');\n    function transpileConditionalDoNoLoc(_) {\n        const { test, result, isUnless } = _;\n        const testAst = transpileVal_1.default(test);\n        return new Statement_1.IfStatement(isUnless ? new Expression_1.UnaryExpression('!', testAst) : testAst, result instanceof Block_1.default ?\n            transpileBlock_1.transpileBlockDo(result) :\n            new Statement_1.ExpressionStatement(transpileVal_1.default(result)));\n    }\n    exports.transpileConditionalDoNoLoc = transpileConditionalDoNoLoc;\n    function transpileConditionalValNoLoc(_) {\n        const { test, result, isUnless } = _;\n        const resultAst = ms_1.msCall('some', transpileBlock_1.blockWrapIfBlock(result));\n        const [ifTrue, ifFalse] = isUnless ? [none, resultAst] : [resultAst, none];\n        return new Expression_1.ConditionalExpression(transpileVal_1.default(test), ifTrue, ifFalse);\n    }\n    exports.transpileConditionalValNoLoc = transpileConditionalValNoLoc;\n    const none = ms_1.msMember('None');\n    function transpileCondNoLoc({ test, ifTrue, ifFalse }) {\n        return new Expression_1.ConditionalExpression(transpileVal_1.default(test), transpileVal_1.default(ifTrue), transpileVal_1.default(ifFalse));\n    }\n    exports.transpileCondNoLoc = transpileCondNoLoc;\n});\n"],"sourceRoot":"/source/"}