{"version":3,"sources":["private/transpile/context.js","private/transpile/context.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,CAAP,EAA+B,OAA/B,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACA/B,aAAA,KAAA,CAAsB,EAAtB,EAAuC;AACtC,gBAAA,aAAA,GAAgB,EAAhB,CADsC;AAEtC,gBAAA,OAAA,GAAU,CAAV,CAFsC;AAGtC,gBAAA,kBAAA,GAAqB,CAArB,CAHsC;KAAvC;AAAgB,YAAA,KAAA,GAAK,KAAL,CDAe;ACM/B,aAAA,QAAA,GAAA;AAEC,gBAAA,aAAA,GAAgB,IAAhB,CAFD;KAAA;AAAgB,YAAA,QAAA,GAAQ,QAAR,CDNe;ACW/B,aAAA,iBAAA,GAAA;AACC,cAAM,IAAI,QAAA,kBAAA,CADX;AAEC,gBAAA,kBAAA,GAAqB,QAAA,kBAAA,GAAqB,CAArB,CAFtB;AAGC,eAAO,CAAP,CAHD;KAAA;AAAgB,YAAA,iBAAA,GAAiB,iBAAjB,CDXe;ACiB/B,aAAA,WAAA,CAA+B,UAA/B,EAAiD,IAAjD,EAA8D;AAC7D,cAAM,aAAa,QAAA,OAAA,CAD0C;AAE7D,gBAAA,OAAA,GAAU,UAAV,CAF6D;AAG7D,cAAM,IAAI,MAAJ,CAHuD;AAI7D,gBAAA,OAAA,GAAU,UAAV,CAJ6D;AAK7D,eAAO,CAAP,CAL6D;KAA9D;AAAgB,YAAA,WAAA,GAAW,WAAX,CDjBe;CAA5B,CAPH","file":"private/transpile/context.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    function setup(vr) {\n        exports.verifyResults = vr;\n        exports.funKind = 0;\n        exports.nextDestructuredId = 0;\n    }\n    exports.setup = setup;\n    function tearDown() {\n        exports.verifyResults = null;\n    }\n    exports.tearDown = tearDown;\n    function getDestructuredId() {\n        const _ = exports.nextDestructuredId;\n        exports.nextDestructuredId = exports.nextDestructuredId + 1;\n        return _;\n    }\n    exports.getDestructuredId = getDestructuredId;\n    function withFunKind(newFunKind, func) {\n        const oldFunKind = exports.funKind;\n        exports.funKind = newFunKind;\n        const _ = func();\n        exports.funKind = oldFunKind;\n        return _;\n    }\n    exports.withFunKind = withFunKind;\n});\n","import {Funs} from '../ast/Fun'\nimport VerifyResults from '../VerifyResults'\n\nexport let verifyResults: VerifyResults\nexport let funKind: Funs\nexport let nextDestructuredId: number\n\nexport function setup(vr: VerifyResults): void {\n\tverifyResults = vr\n\tfunKind = Funs.Plain\n\tnextDestructuredId = 0\n}\n\nexport function tearDown(): void {\n\t// Release for garbage collection.\n\tverifyResults = null\n}\n\nexport function getDestructuredId(): number {\n\tconst _ = nextDestructuredId\n\tnextDestructuredId = nextDestructuredId + 1\n\treturn _\n}\n\nexport function withFunKind<A>(newFunKind: Funs, func: () => A): A {\n\tconst oldFunKind = funKind\n\tfunKind = newFunKind\n\tconst _ = func()\n\tfunKind = oldFunKind\n\treturn _\n}\n"],"sourceRoot":"/source/"}