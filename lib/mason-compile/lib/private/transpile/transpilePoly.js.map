{"version":3,"sources":["private/transpile/transpilePoly.js"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,sBAAvB,EAA+C,mBAA/C,EAAoE,OAApE,EAA6E,YAA7E,EAA2F,mBAA3F,EAAgH,WAAhH,EAA6H,MAA7H,EAAqI,gBAArI,EAAuJ,gBAAvJ,CAAP,EAAiL,OAAjL,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;AAE3B,UAAM,eAAe,QAAQ,sBAAR,CAAf,CAFqB;AAG3B,UAAM,YAAY,QAAQ,mBAAR,CAAZ,CAHqB;AAI3B,UAAM,OAAO,QAAQ,OAAR,CAAP,CAJqB;AAK3B,UAAM,QAAQ,QAAQ,YAAR,CAAR,CALqB;AAM3B,UAAM,oBAAoB,QAAQ,mBAAR,CAApB,CANqB;AAO3B,UAAM,YAAY,QAAQ,WAAR,CAAZ,CAPqB;AAQ3B,UAAM,OAAO,QAAQ,MAAR,CAAP,CARqB;AAS3B,UAAM,iBAAiB,QAAQ,gBAAR,CAAjB,CATqB;AAU3B,UAAM,iBAAiB,QAAQ,gBAAR,CAAjB,CAVqB;AAW3B,aAAS,kBAAT,CAA4B,CAA5B,EAA+B;cACnB,QAAU,EAAV,MADmB;;AAE3B,cAAM,OAAO,IAAI,UAAU,aAAV,CAAwB,UAAU,aAAV,CAAwB,IAAxB,CAA6B,CAA7B,CAA5B,CAAP,CAFqB;AAG3B,cAAM,OAAO,MAAM,SAAN,KAAoB,IAApB,GACT,IAAI,aAAa,eAAb,CAA6B,MAAM,IAAN,CAAW,GAAX,CAAe,OAAS;AACrD,kBAAM,OAAO,IAAI,UAAU,aAAV,CAAwB,IAAI,IAAJ,CAAnC,CAD+C;AAErD,mBAAO,KAAK,MAAL,CAAY,IAAI,MAAJ,EAAY,KAAK,IAAI,aAAa,eAAb,CAA6B,CAAC,IAAD,EAAO,eAAe,OAAf,CAAuB,CAAvB,CAAP,CAAjC,CAAL,EAA0E,MAAM,IAAN,CAAzG,CAFqD;SAAT,CAAhD,CADS,GAKT,kBAAkB,YAAlB,CARuB;AAS3B,cAAM,OAAO,iBAAiB,MAAM,QAAN,GAAiB,CAAC,eAAe,iBAAf,CAAiC,KAAjC,CAAD,CAAlC,GAA8E,EAA9E,CATc;AAU3B,eAAO,KAAK,MAAL,CAAY,QAAZ,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,GAAG,IAAH,CAAzC,CAV2B;KAA/B;AAYA,YAAQ,kBAAR,GAA6B,kBAA7B,CAvB2B;CAA5B,CAPH","file":"private/transpile/transpilePoly.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Expression', 'esast/lib/Literal', 'op/Op', '../ast/Fun', './esast-constants', './context', './ms', './transpileFun', './transpileVal'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Expression_1 = require('esast/lib/Expression');\n    const Literal_1 = require('esast/lib/Literal');\n    const Op_1 = require('op/Op');\n    const Fun_1 = require('../ast/Fun');\n    const esast_constants_1 = require('./esast-constants');\n    const context_1 = require('./context');\n    const ms_1 = require('./ms');\n    const transpileFun_1 = require('./transpileFun');\n    const transpileVal_1 = require('./transpileVal');\n    function transpilePolyNoLoc(_) {\n        const { value } = _;\n        const name = new Literal_1.LiteralString(context_1.verifyResults.name(_));\n        const args = value.opRestArg === null ?\n            new Expression_1.ArrayExpression(value.args.map((arg) => {\n                const name = new Literal_1.LiteralString(arg.name);\n                return Op_1.caseOp(arg.opType, _ => new Expression_1.ArrayExpression([name, transpileVal_1.default(_)]), () => name);\n            })) :\n            esast_constants_1.litUndefined;\n        const impl = value instanceof Fun_1.FunBlock ? [transpileFun_1.transpileFunBlock(value)] : [];\n        return ms_1.msCall('method', name, args, ...impl);\n    }\n    exports.transpilePolyNoLoc = transpilePolyNoLoc;\n});\n"],"sourceRoot":"/source/"}