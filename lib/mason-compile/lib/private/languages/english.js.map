{"version":3,"sources":["private/languages/english.js","private/languages/english.ts"],"names":[],"mappings":"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","file":"private/languages/english.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../token/Group', '../util', './util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Group_1 = require('../token/Group');\n    const util_1 = require('../util');\n    const util_2 = require('./util');\n    const english = {\n        badInterpolation: `${util_2.showChar(35)} must be followed by ` +\n            `${util_2.showChar(40)}, ${util_2.showChar(35)}, or a name.`,\n        badSpacedIndent: (indent) => `Indentation spaces must be a multiple of ${indent}.`,\n        commentNeedsSpace: 'A comment should start with a space or tab.',\n        emptyBlock: 'Empty block.',\n        extraSpace: 'Unnecessary space.',\n        mismatchedGroupClose: (actual, expected) => `Trying to close ${util_2.showGroupType(actual)}, but last opened ${util_2.showGroup(expected)}.`,\n        noLeadingSpace: 'Line begins in a space',\n        nonLeadingTab: 'Tab may only be used to indent',\n        noNewlineInInterpolation: 'Quote interpolation cannot contain newline.',\n        reservedChar: (char) => `Reserved character ${util_2.showChar(char)}.`,\n        suggestSimpleQuote: (name) => `Quoted text could be a simple quote ${util_2.code(`'${name}`)}.`,\n        tooMuchIndent: 'Line is indented more than once.',\n        tooMuchIndentQuote: 'Indented quote must have exactly one more indent than previous line.',\n        trailingDocComment: `Doc comment must go on its own line. Did you mean ${util_2.code('||')}?`,\n        trailingSpace: 'Line ends in a space.',\n        unclosedQuote: 'Unclosed quote.',\n        argsCond: `${util_2.showKeyword(3)} takes exactly 3 arguments.`,\n        argsConditional: (kind) => `${util_2.showKeyword(kind)} with no block takes exactly 2 arguments.`,\n        argsDel: `${util_2.showKeyword(4)} takes only one argument.`,\n        argsTraitDo: `${util_2.showKeyword(32)} takes 2 arguments: implementor and trait.`,\n        asToken: `Expected only 1 token after ${util_2.showKeyword(35)}.`,\n        badAssignee: `Assignee should be exactly 1 token (may be a ${util_2.showGroupType(Group_1.GroupBrace)} group)`,\n        caseSwitchNeedsParts: `Must have at least 1 non-${util_2.showKeyword(43)} test.`,\n        expectedAfterAssert: `Expected something after ${util_2.showKeyword(24)}.`,\n        expectedAfterColon: `Expected something after ${util_2.showKeyword(38)}.`,\n        expectedBlock: 'Expected an indented block.',\n        expectedExpression: 'Expected an expression, got nothing.',\n        expectedImportModuleName: 'Expected a module name to import.',\n        expectedKeyword: (keyword) => `Expected ${util_2.showKeyword(keyword)}`,\n        expectedMethodSplit: 'Expected a function keyword somewhere.',\n        expectedOneLocal: 'Expected only one local declaration.',\n        expectedLocalName: (token) => `Expected a local name, not ${util_2.showToken(token)}.`,\n        expectedName: (token) => `Expected a name, not ${util_2.showToken(token)}`,\n        extraParens: `Unnecessary ${util_2.showGroupType(Group_1.GroupParenthesis)}`,\n        funFocusArgIsImplicit: (keyword) => `Nothing may come after ${util_2.showKeyword(keyword)}; function argument is implicitly ${util_2.showKeyword(46)}.`,\n        implicitFunctionDot: `Function ${util_2.showChar(46)} is implicit for methods.`,\n        infiniteRange: `Use ${util_2.showKeyword(27)} for infinite ranges.`,\n        invalidImportModule: 'Not a valid module name.',\n        methodName: `Method name must be exactly one token (may be a ${util_2.showGroupType(Group_1.GroupParenthesis)} group).`,\n        noImportFocus: `${util_2.showKeyword(46)} not allowed as import name.`,\n        noMyOverride: `Method can't be both ${util_2.showKeyword(52)} and ${util_2.showKeyword(54)}.`,\n        noSpecialKeyword: (kind) => `${util_2.code(kind)} is not allowed here.`,\n        nothingAfterFinally: `Nothing may come after ${util_2.showKeyword(45)}.`,\n        parensOutsideCall: `Use ${util_2.code('(a b)')}, not ${util_2.code('a(b)')}.`,\n        reservedWord: (name) => `Reserved word ${util_2.code(name)}.`,\n        tokenAfterSuper: `Expected ${util_2.showKeyword(41)} or ${util_2.code('()')} after ${util_2.showKeyword(13)}`,\n        todoForPattern: 'TODO: pattern in for',\n        todoLazyField: 'TODO: lazy fields',\n        todoMutateDestructure: 'TODO: LocalDestructureMutate',\n        unexpected: (token) => `Unexpected ${util_2.showToken(token)}.`,\n        unexpectedAfter: (token) => `Did not expect anything after ${util_2.showToken(token)}.`,\n        unexpectedAfterImportDo: `This is an ${util_2.showKeyword(49)}, so you can't import any values.`,\n        unexpectedAfterKind: (kind) => `Did not expect anything between ${util_2.showKeyword(kind)} and block.`,\n        unexpectedAfterPoly: `Did not expect anything between ${util_2.showKeyword(11)} and function.`,\n        ambiguousSK: 'Can\\'t tell if this is a statement. Some parts are statements but others are values.',\n        ambiguousForSK: `Can't tell if ${util_2.showKeyword(6)} is a statement. ` +\n            `Some ${util_2.showKeyword(25)}s have a value, others don't.`,\n        argsOperator: (numProvidedArgs) => `Operator should have multiple arguments, got ${numProvidedArgs}`,\n        badRegExp: (source) => {\n            try {\n                new RegExp(source);\n                util_1.assert(false);\n                return '';\n            }\n            catch (err) {\n                return err.message;\n            }\n        },\n        blockNeedsContent: 'Value block must have some content.',\n        breakCantHaveValue: `${util_2.showKeyword(25)} with value needs ${util_2.showKeyword(6)} to be in expression position.`,\n        breakNeedsValue: `${util_2.showKeyword(6)} in expression position must ${util_2.showKeyword(25)} with a value.`,\n        breakValInForBag: `${util_2.showKeyword(25)} in ${util_2.showKeyword(8)} may not have value.`,\n        cantDetermineName: 'Expression must be placed in a position where name can be determined.',\n        cantInferBlockKind: 'Block has mixed bag/map/obj entries — can not infer type.',\n        destructureAllLazy: 'All locals of destructuring assignment must all lazy or all non-lazy.',\n        doFuncCantHaveType: 'Function with return type must return something.',\n        duplicateImport: (name, prevLoc) => `${util_2.code(name)} already imported at ${util_2.showLoc(prevLoc)}`,\n        duplicateKey: (key) => `Duplicate key ${util_2.code(key)}`,\n        duplicateLocal: (name) => `A local ${util_2.code(name)} already exists and can't be shadowed.`,\n        elseRequiresCatch: `${util_2.showKeyword(43)} must come after a ${util_2.showKeyword(37)}.`,\n        exportName: 'Module export must have a constant name.',\n        forAsyncNeedsAsync: `${util_2.showKeyword(7)} as statement must be inside an async function.`,\n        misplacedAwait: `Cannot ${util_2.showKeyword(0)} outside of async function.`,\n        misplacedBreak: 'Not in a loop.',\n        misplacedSpreadDo: `Can not spread here. Did you forget the space after ${util_2.showKeyword(27)}?`,\n        misplacedSpreadVal: `Can only spread in call, ${util_2.showKeyword(10)}, or ${util_2.showGroupType(Group_1.GroupBracket)}.`,\n        misplacedYield: (kind) => `Cannot ${util_2.showKeyword(kind)} outside of generator function.`,\n        missingLocal: (name) => `No such local ${util_2.code(name)}.`,\n        noLazyCatch: 'Caught error can not be lazy.',\n        noLazyIteratee: 'Iteration element can not be lazy.',\n        overriddenBuiltin: (name, builtinPath) => `Local ${util_2.code(name)} overrides builtin from ${util_2.code(builtinPath)}.`,\n        statementAsValue: 'This can only be used as a statement, but appears in expression context.',\n        superForbidden: `Class has no superclass, so ${util_2.showKeyword(13)} is not allowed.`,\n        superMustBeStatement: `${util_2.showKeyword(13)} in constructor must appear as a statement.'`,\n        superNeeded: `Constructor must contain ${util_2.showKeyword(13)}`,\n        superNeedsMethod: `${util_2.showKeyword(13)} must be in a method.`,\n        unusedLocal: (name) => `Unused local variable ${util_2.code(name)}.`,\n        uselessExcept: `${util_2.showKeyword(5)} must have ${util_2.showKeyword(37)} or ${util_2.showKeyword(45)}.`,\n        valueAsStatement: 'Value appears in statement context, so it does nothing.'\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = english;\n});\n","import Loc from 'esast/lib/Loc'\nimport Char from 'typescript-char/Char'\nimport Token from '../token/Token'\nimport Group, {GroupBrace, GroupBracket, GroupParenthesis, GroupType} from '../token/Group'\nimport {Kw} from '../token/Keyword'\nimport {assert} from '../util'\nimport Language from './Language'\nimport {code, showChar, showGroup, showGroupType, showKeyword as kw, showLoc, showToken\n\t} from './util'\n\nconst english: Language = {\n\t// Lex:\n\n\tbadInterpolation:\n\t\t`${showChar(Char.Hash)} must be followed by ` +\n\t\t`${showChar(Char.OpenParenthesis)}, ${showChar(Char.Hash)}, or a name.`,\n\tbadSpacedIndent: (indent: number): string =>\n\t\t`Indentation spaces must be a multiple of ${indent}.`,\n\tcommentNeedsSpace:\n\t\t'A comment should start with a space or tab.',\n\temptyBlock:\n\t\t'Empty block.',\n\textraSpace:\n\t\t'Unnecessary space.',\n\tmismatchedGroupClose: (actual: GroupType, expected: Group<Token>): string =>\n\t\t`Trying to close ${showGroupType(actual)}, but last opened ${showGroup(expected)}.`,\n\tnoLeadingSpace:\n\t\t'Line begins in a space',\n\tnonLeadingTab:\n\t\t'Tab may only be used to indent',\n\tnoNewlineInInterpolation:\n\t\t'Quote interpolation cannot contain newline.',\n\treservedChar: (char: Char): string =>\n\t\t`Reserved character ${showChar(char)}.`,\n\tsuggestSimpleQuote: (name: string): string =>\n\t\t`Quoted text could be a simple quote ${code(`'${name}`)}.`,\n\ttooMuchIndent:\n\t\t'Line is indented more than once.',\n\ttooMuchIndentQuote:\n\t\t'Indented quote must have exactly one more indent than previous line.',\n\ttrailingDocComment:\n\t\t`Doc comment must go on its own line. Did you mean ${code('||')}?`,\n\ttrailingSpace:\n\t\t'Line ends in a space.',\n\tunclosedQuote:\n\t\t'Unclosed quote.',\n\n\t// Parse:\n\n\targsCond:\n\t\t`${kw(Kw.Cond)} takes exactly 3 arguments.`,\n\targsConditional: (kind: Kw): string =>\n\t\t`${kw(kind)} with no block takes exactly 2 arguments.`,\n\targsDel:\n\t\t`${kw(Kw.Del)} takes only one argument.`,\n\targsTraitDo:\n\t\t`${kw(Kw.TraitDo)} takes 2 arguments: implementor and trait.`,\n\tasToken:\n\t\t`Expected only 1 token after ${kw(Kw.As)}.`,\n\tbadAssignee:\n\t\t`Assignee should be exactly 1 token (may be a ${showGroupType(GroupBrace)} group)`,\n\tcaseSwitchNeedsParts:\n\t\t`Must have at least 1 non-${kw(Kw.Else)} test.`,\n\texpectedAfterAssert:\n\t\t`Expected something after ${kw(Kw.Assert)}.`,\n\texpectedAfterColon:\n\t\t`Expected something after ${kw(Kw.Colon)}.`,\n\texpectedBlock:\n\t\t'Expected an indented block.',\n\texpectedExpression:\n\t\t'Expected an expression, got nothing.',\n\texpectedImportModuleName:\n\t\t'Expected a module name to import.',\n\texpectedKeyword: (keyword: Kw): string =>\n\t\t`Expected ${kw(keyword)}`,\n\texpectedMethodSplit:\n\t\t'Expected a function keyword somewhere.',\n\texpectedOneLocal:\n\t\t'Expected only one local declaration.',\n\texpectedLocalName: (token: Token): string =>\n\t\t`Expected a local name, not ${showToken(token)}.`,\n\texpectedName: (token: Token): string =>\n\t\t`Expected a name, not ${showToken(token)}`,\n\textraParens:\n\t\t`Unnecessary ${showGroupType(GroupParenthesis)}`,\n\tfunFocusArgIsImplicit: (keyword: Kw): string =>\n\t\t`Nothing may come after ${kw(keyword)}; function argument is implicitly ${kw(Kw.Focus)}.`,\n\timplicitFunctionDot:\n\t\t`Function ${showChar(Char.Period)} is implicit for methods.`,\n\tinfiniteRange:\n\t\t`Use ${kw(Kw.Dot3)} for infinite ranges.`,\n\tinvalidImportModule:\n\t\t'Not a valid module name.',\n\tmethodName:\n\t\t`Method name must be exactly one token (may be a ${showGroupType(GroupParenthesis)} group).`,\n\tnoImportFocus:\n\t\t`${kw(Kw.Focus)} not allowed as import name.`,\n\tnoMyOverride:\n\t\t`Method can't be both ${kw(Kw.My)} and ${kw(Kw.Override)}.`,\n\tnoSpecialKeyword: (kind: 'todo' | 'region'): string =>\n\t\t`${code(kind)} is not allowed here.`,\n\tnothingAfterFinally:\n\t\t`Nothing may come after ${kw(Kw.Finally)}.`,\n\tparensOutsideCall:\n\t\t`Use ${code('(a b)')}, not ${code('a(b)')}.`,\n\treservedWord: (name: string): string =>\n\t\t`Reserved word ${code(name)}.`,\n\ttokenAfterSuper:\n\t\t`Expected ${kw(Kw.Dot)} or ${code('()')} after ${kw(Kw.Super)}`,\n\ttodoForPattern:\n\t\t'TODO: pattern in for',\n\ttodoLazyField:\n\t\t'TODO: lazy fields',\n\ttodoMutateDestructure:\n\t\t'TODO: LocalDestructureMutate',\n\tunexpected: (token: Token): string =>\n\t\t`Unexpected ${showToken(token)}.`,\n\tunexpectedAfter: (token: Token): string =>\n\t\t`Did not expect anything after ${showToken(token)}.`,\n\tunexpectedAfterImportDo:\n\t\t`This is an ${kw(Kw.ImportDo)}, so you can't import any values.`,\n\tunexpectedAfterKind: (kind: Kw): string =>\n\t\t`Did not expect anything between ${kw(kind)} and block.`,\n\tunexpectedAfterPoly:\n\t\t`Did not expect anything between ${kw(Kw.Poly)} and function.`,\n\n\t// Verify:\n\n\tambiguousSK:\n\t\t'Can\\'t tell if this is a statement. Some parts are statements but others are values.',\n\tambiguousForSK:\n\t\t`Can't tell if ${kw(Kw.For)} is a statement. ` +\n\t\t`Some ${kw(Kw.Break)}s have a value, others don't.`,\n\targsOperator: (numProvidedArgs: number): string =>\n\t\t`Operator should have multiple arguments, got ${numProvidedArgs}`,\n\tbadRegExp: (source: string): string => {\n\t\ttry {\n\t\t\t/* tslint:disable:no-unused-expression */\n\t\t\tnew RegExp(source)\n\t\t\t// This should only be called for bad regexp...\n\t\t\tassert(false)\n\t\t\treturn ''\n\t\t} catch (err) {\n\t\t\treturn err.message\n\t\t}\n\t},\n\tblockNeedsContent:\n\t\t'Value block must have some content.',\n\tbreakCantHaveValue:\n\t\t`${kw(Kw.Break)} with value needs ${kw(Kw.For)} to be in expression position.`,\n\tbreakNeedsValue:\n\t\t`${kw(Kw.For)} in expression position must ${kw(Kw.Break)} with a value.`,\n\tbreakValInForBag:\n\t\t`${kw(Kw.Break)} in ${kw(Kw.ForBag)} may not have value.`,\n\tcantDetermineName:\n\t\t'Expression must be placed in a position where name can be determined.',\n\tcantInferBlockKind:\n\t\t'Block has mixed bag/map/obj entries — can not infer type.',\n\tdestructureAllLazy:\n\t\t'All locals of destructuring assignment must all lazy or all non-lazy.',\n\tdoFuncCantHaveType:\n\t\t'Function with return type must return something.',\n\tduplicateImport: (name: string, prevLoc: Loc): string =>\n\t\t`${code(name)} already imported at ${showLoc(prevLoc)}`,\n\tduplicateKey: (key: string): string =>\n\t\t`Duplicate key ${code(key)}`,\n\tduplicateLocal: (name: string): string =>\n\t\t`A local ${code(name)} already exists and can't be shadowed.`,\n\telseRequiresCatch:\n\t\t`${kw(Kw.Else)} must come after a ${kw(Kw.Catch)}.`,\n\texportName:\n\t\t'Module export must have a constant name.',\n\tforAsyncNeedsAsync:\n\t\t`${kw(Kw.ForAsync)} as statement must be inside an async function.`,\n\tmisplacedAwait:\n\t\t`Cannot ${kw(Kw.Await)} outside of async function.`,\n\tmisplacedBreak:\n\t\t'Not in a loop.',\n\tmisplacedSpreadDo:\n\t\t`Can not spread here. Did you forget the space after ${kw(Kw.Dot3)}?`,\n\tmisplacedSpreadVal:\n\t\t`Can only spread in call, ${kw(Kw.New)}, or ${showGroupType(GroupBracket)}.`,\n\tmisplacedYield: (kind: Kw): string =>\n\t\t`Cannot ${kw(kind)} outside of generator function.`,\n\tmissingLocal: (name: string): string =>\n\t\t`No such local ${code(name)}.`,\n\tnoLazyCatch:\n\t\t'Caught error can not be lazy.',\n\tnoLazyIteratee:\n\t\t'Iteration element can not be lazy.',\n\toverriddenBuiltin: (name: string, builtinPath: string): string =>\n\t\t`Local ${code(name)} overrides builtin from ${code(builtinPath)}.`,\n\tstatementAsValue:\n\t\t'This can only be used as a statement, but appears in expression context.',\n\tsuperForbidden:\n\t\t`Class has no superclass, so ${kw(Kw.Super)} is not allowed.`,\n\tsuperMustBeStatement:\n\t\t`${kw(Kw.Super)} in constructor must appear as a statement.'`,\n\tsuperNeeded:\n\t\t`Constructor must contain ${kw(Kw.Super)}`,\n\tsuperNeedsMethod:\n\t\t`${kw(Kw.Super)} must be in a method.`,\n\tunusedLocal: (name: string): string =>\n\t\t`Unused local variable ${code(name)}.`,\n\tuselessExcept:\n\t\t`${kw(Kw.Except)} must have ${kw(Kw.Catch)} or ${kw(Kw.Finally)}.`,\n\tvalueAsStatement:\n\t\t'Value appears in statement context, so it does nothing.'\n}\nexport default english\n"],"sourceRoot":"/source/"}