{"version":3,"sources":["private/ast/errors.js","private/ast/errors.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,eAAlC,EAAmD,SAAnD,CAAP,EAAsE,OAAtE,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,UAAA,SAAA,QAA0B,SAA1B,CAAA,CDK+B;ACH/B,UAAA,gBAAA,QAAmC,eAAnC,CAAA,CDG+B;ACD/B,UAAA,UAAA,QAAkB,SAAlB,CAAA,CDC+B;ACE/B,UAAA,KAAA,SAA2B,cAAA,MAAA,CAAM;AAChC,oBAAY,GAAZ,EAA6B,QAA7B,EAA8C;AAC7C,kBAAM,GAAN,EAD6C;AAAjB,iBAAA,QAAA,GAAA,QAAA,CAAiB;SAA9C;KADD;AAAa,YAAA,KAAA,GAAK,KAAL,CDFkB;ACS/B,UAAA,MAAA,SAA4B,cAAA,MAAA,CAAM;AACjC,oBACC,GADD,EAGQ,MAHR,EAKQ,SALR,EAMQ,QANR,EAMyB;AACxB,kBAAM,GAAN,EADwB;AAHjB,iBAAA,MAAA,GAAA,MAAA,CAGiB;AADjB,iBAAA,SAAA,GAAA,SAAA,CACiB;AAAjB,iBAAA,QAAA,GAAA,QAAA,CAAiB;SANzB;KADD;AAAa,YAAA,MAAA,GAAM,MAAN,CDTkB;ACgC/B,UAAA,MAAA,SAA4B,cAAA,OAAA,CAAO;AAClC,oBACC,GADD,EAEQ,KAFR,EAIQ,YAJR,EAMQ,UANR,EAOQ,MAPR,EAQQ,SARR,EAQ4B;AAC3B,kBAAM,GAAN,EAD2B;AANpB,iBAAA,KAAA,GAAA,KAAA,CAMoB;AAJpB,iBAAA,YAAA,GAAA,YAAA,CAIoB;AAFpB,iBAAA,UAAA,GAAA,UAAA,CAEoB;AADpB,iBAAA,MAAA,GAAA,MAAA,CACoB;AAApB,iBAAA,SAAA,GAAA,SAAA,CAAoB;SAR5B;AAYA,YAAI,UAAJ,GAAc;AACb,mBAAO,OAAA,GAAA,CAAI,KAAK,YAAL,EAAmB,KAAK,UAAL,CAA9B,CADa;SAAd;KAbD;AAAa,YAAA,MAAA,GAAM,MAAN,CDhCkB;ACsD/B,UAAA,KAAA,SAA2B,QAAA,OAAA,CAAK;AAC/B,oBAAY,GAAZ,EAA6B,MAA7B,EAA0D,KAA1D,EAAsE;AACrE,kBAAM,GAAN,EADqE;AAAzC,iBAAA,MAAA,GAAA,MAAA,CAAyC;AAAZ,iBAAA,KAAA,GAAA,KAAA,CAAY;AAErE,mBAAA,MAAA,CAAO,CAAE,OAAO,MAAP,CAAT,CAFqE;SAAtE;KADD;AAAa,YAAA,KAAA,GAAK,KAAL,CDtDkB;CAA5B,CAPH","file":"private/ast/errors.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../util', './LineContent', './MsAst'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const util_1 = require('../util');\n    const LineContent_1 = require('./LineContent');\n    const MsAst_1 = require('./MsAst');\n    class Throw extends LineContent_1.DoOnly {\n        constructor(loc, opThrown) {\n            super(loc);\n            this.opThrown = opThrown;\n        }\n    }\n    exports.Throw = Throw;\n    class Assert extends LineContent_1.DoOnly {\n        constructor(loc, negate, condition, opThrown) {\n            super(loc);\n            this.negate = negate;\n            this.condition = condition;\n            this.opThrown = opThrown;\n        }\n    }\n    exports.Assert = Assert;\n    class Except extends LineContent_1.ValOrDo {\n        constructor(loc, tried, typedCatches, opCatchAll, opElse, opFinally) {\n            super(loc);\n            this.tried = tried;\n            this.typedCatches = typedCatches;\n            this.opCatchAll = opCatchAll;\n            this.opElse = opElse;\n            this.opFinally = opFinally;\n        }\n        get allCatches() {\n            return util_1.cat(this.typedCatches, this.opCatchAll);\n        }\n    }\n    exports.Except = Except;\n    class Catch extends MsAst_1.default {\n        constructor(loc, caught, block) {\n            super(loc);\n            this.caught = caught;\n            this.block = block;\n            util_1.assert(!(caught.isLazy));\n        }\n    }\n    exports.Catch = Catch;\n});\n","import Loc from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport {assert, cat} from '../util'\nimport Block from './Block'\nimport {DoOnly, Val, ValOrDo} from './LineContent'\nimport {LocalDeclare} from './locals'\nimport MsAst from './MsAst'\n\n/** `throw! {opThrown}` */\nexport class Throw extends DoOnly {\n\tconstructor(loc: Loc, public opThrown: Op<Val>) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `assert!/forbid! {condition} throw! {opThrown}` */\nexport class Assert extends DoOnly {\n\tconstructor(\n\t\tloc: Loc,\n\t\t/** If true, this is a `forbid!`. */\n\t\tpublic negate: boolean,\n\t\t/** Compiled specially if a [[Call]]. */\n\t\tpublic condition: Val,\n\t\tpublic opThrown: Op<Val>) {\n\t\tsuper(loc)\n\t}\n}\n\n/**\n```except\n\ttry\n\t\t{try}\n\tcatch\n\t\t{opCatch}\n\telse\n\t\t{opElse}\n\tfinally\n\t\t{opFinally}```\n*/\nexport class Except extends ValOrDo {\n\tconstructor(\n\t\tloc: Loc,\n\t\tpublic tried: Block,\n\t\t/** These all have types for their LocalDeclares. */\n\t\tpublic typedCatches: Array<Catch>,\n\t\t/** opCatchAll.caught should have no type. */\n\t\tpublic opCatchAll: Op<Catch>,\n\t\tpublic opElse: Op<Block>,\n\t\tpublic opFinally: Op<Block>) {\n\t\tsuper(loc)\n\t}\n\n\tget allCatches(): Array<Catch> {\n\t\treturn cat(this.typedCatches, this.opCatchAll)\n\t}\n}\n\n/**\n```catch {caught}\n\t{block}```\n*/\nexport class Catch extends MsAst {\n\tconstructor(loc: Loc, public caught: LocalDeclare, public block: Block) {\n\t\tsuper(loc)\n\t\tassert(!(caught.isLazy))\n\t}\n}\n"],"sourceRoot":"/source/"}