{"version":3,"sources":["private/ast/booleans.js","private/ast/booleans.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,eAAvB,CAAP,EAAgD,OAAhD,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,UAAA,gBAAA,QAA2B,eAA3B,CAAA,CDK+B;ACC/B,UAAA,WAAA,SAAiC,cAAA,OAAA,CAAO;AACvC,oBACC,GADD,EAEQ,IAFR,EAGQ,MAHR,EAIQ,QAJR,EAIyB;AACxB,kBAAM,GAAN,EADwB;AAFjB,iBAAA,IAAA,GAAA,IAAA,CAEiB;AADjB,iBAAA,MAAA,GAAA,MAAA,CACiB;AAAjB,iBAAA,QAAA,GAAA,QAAA,CAAiB;SAJzB;KADD;AAAa,YAAA,WAAA,GAAW,WAAX,CDDkB;ACY/B,UAAA,IAAA,SAA0B,cAAA,OAAA,CAAO;AAChC,oBAAY,GAAZ,EAA6B,IAA7B,EAA+C,MAA/C,EAAmE,OAAnE,EAA+E;AAC9E,kBAAM,GAAN,EAD8E;AAAlD,iBAAA,IAAA,GAAA,IAAA,CAAkD;AAAhC,iBAAA,MAAA,GAAA,MAAA,CAAgC;AAAZ,iBAAA,OAAA,GAAA,OAAA,CAAY;SAA/E;KADD;AAAa,YAAA,IAAA,GAAI,IAAJ,CDZkB;CAA5B,CAPH","file":"private/ast/booleans.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './LineContent'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const LineContent_1 = require('./LineContent');\n    class Conditional extends LineContent_1.ValOrDo {\n        constructor(loc, test, result, isUnless) {\n            super(loc);\n            this.test = test;\n            this.result = result;\n            this.isUnless = isUnless;\n        }\n    }\n    exports.Conditional = Conditional;\n    class Cond extends LineContent_1.ValOrDo {\n        constructor(loc, test, ifTrue, ifFalse) {\n            super(loc);\n            this.test = test;\n            this.ifTrue = ifTrue;\n            this.ifFalse = ifFalse;\n        }\n    }\n    exports.Cond = Cond;\n});\n","import Loc from 'esast/lib/Loc'\nimport Block from './Block'\nimport {Val, ValOrDo} from './LineContent'\n\n/**\n```if/unless {test}\n\t{result}```\n*/\nexport class Conditional extends ValOrDo {\n\tconstructor(\n\t\tloc: Loc,\n\t\tpublic test: Val,\n\t\tpublic result: Block | Val,\n\t\tpublic isUnless: boolean) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `cond {test} {ifTrue} {ifFalse}` */\nexport class Cond extends ValOrDo {\n\tconstructor(loc: Loc, public test: Val, public ifTrue: Val, public ifFalse: Val) {\n\t\tsuper(loc)\n\t}\n}\n"],"sourceRoot":"/source/"}