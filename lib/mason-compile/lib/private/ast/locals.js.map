{"version":3,"sources":["private/ast/locals.js","private/ast/locals.ts"],"names":[],"mappings":"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","file":"private/ast/locals.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './LineContent', './MsAst'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const LineContent_1 = require('./LineContent');\n    const MsAst_1 = require('./MsAst');\n    class LocalDeclare extends MsAst_1.default {\n        constructor(loc, name, opType, kind) {\n            super(loc);\n            this.name = name;\n            this.opType = opType;\n            this.kind = kind;\n        }\n        static untyped(loc, name, kind) {\n            return new LocalDeclare(loc, name, null, kind);\n        }\n        static plain(loc, name) {\n            return new LocalDeclare(loc, name, null, 0);\n        }\n        static built(loc) {\n            return this.plain(loc, 'built');\n        }\n        static focus(loc) {\n            return this.plain(loc, '_');\n        }\n        static typedFocus(loc, type) {\n            return new LocalDeclare(loc, '_', type, 0);\n        }\n        static this(loc) {\n            return this.plain(loc, 'this');\n        }\n        get isLazy() {\n            return this.kind === 1;\n        }\n    }\n    exports.LocalDeclare = LocalDeclare;\n    class LocalAccess extends LineContent_1.ValOnly {\n        constructor(loc, name) {\n            super(loc);\n            this.name = name;\n        }\n        static focus(loc) {\n            return new LocalAccess(loc, '_');\n        }\n        static this(loc) {\n            return new LocalAccess(loc, 'this');\n        }\n    }\n    exports.LocalAccess = LocalAccess;\n    class LocalMutate extends LineContent_1.DoOnly {\n        constructor(loc, name, value) {\n            super(loc);\n            this.name = name;\n            this.value = value;\n        }\n    }\n    exports.LocalMutate = LocalMutate;\n    class Assign extends LineContent_1.DoOnly {\n    }\n    exports.Assign = Assign;\n    class AssignSingle extends Assign {\n        constructor(loc, assignee, value) {\n            super(loc);\n            this.assignee = assignee;\n            this.value = value;\n        }\n        static focus(loc, value) {\n            return new AssignSingle(loc, LocalDeclare.focus(loc), value);\n        }\n        allAssignees() {\n            return [this.assignee];\n        }\n    }\n    exports.AssignSingle = AssignSingle;\n    class AssignDestructure extends Assign {\n        constructor(loc, assignees, value) {\n            super(loc);\n            this.assignees = assignees;\n            this.value = value;\n        }\n        get kind() {\n            return this.assignees[0].kind;\n        }\n        allAssignees() {\n            return this.assignees;\n        }\n    }\n    exports.AssignDestructure = AssignDestructure;\n});\n","import Loc from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport {DoOnly, Val, ValOnly} from './LineContent'\nimport MsAst from './MsAst'\n\n/**\nAll [[LocalAccess]]es must have some LocalDeclare to access.\nAll accessible identifiers are therefore LocalDeclares.\nThis includes imports, `this`, the focus, etc.\n*/\nexport class LocalDeclare extends MsAst {\n\t/** LocalDeclare with no type. */\n\tstatic untyped(loc: Loc, name: string, kind: LocalDeclares): LocalDeclare {\n\t\treturn new LocalDeclare(loc, name, null, kind)\n\t}\n\n\t/** LocalDeclare of just a name. */\n\tstatic plain(loc: Loc, name: string): LocalDeclare {\n\t\treturn new LocalDeclare(loc, name, null, LocalDeclares.Eager)\n\t}\n\n\tstatic built(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, 'built')\n\t}\n\tstatic focus(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, '_')\n\t}\n\tstatic typedFocus(loc: Loc, type: Val): LocalDeclare {\n\t\treturn new LocalDeclare(loc, '_', type, LocalDeclares.Eager)\n\t}\n\tstatic this(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, 'this')\n\t}\n\n\tconstructor(\n\t\tloc: Loc,\n\t\tpublic name: string,\n\t\tpublic opType: Op<Val>,\n\t\tpublic kind: LocalDeclares) {\n\t\tsuper(loc)\n\t}\n\n\tget isLazy(): boolean {\n\t\treturn this.kind === LocalDeclares.Lazy\n\t}\n}\n/** Kind of [[NocalDeclare]]. */\nexport const enum LocalDeclares {\n\t/** Declared normally. */\n\tEager,\n\t/** Declared with `~a`. */\n\tLazy\n}\n\n/** Access the local `name`. */\nexport class LocalAccess extends ValOnly {\n\tstatic focus(loc: Loc): LocalAccess {\n\t\treturn new LocalAccess(loc, '_')\n\t}\n\n\tstatic this(loc: Loc): LocalAccess {\n\t\treturn new LocalAccess(loc, 'this')\n\t}\n\n\tconstructor(loc: Loc, public name: string) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `{name} := {value}` */\nexport class LocalMutate extends DoOnly {\n\tconstructor(loc: Loc, public name: string, public value: Val) {\n\t\tsuper(loc)\n\t}\n}\n\n/** Any expression creating new locals. */\nexport abstract class Assign extends DoOnly {\n\t/**\n\tAll locals created by the assign.\n\t@abstract\n\t*/\n\t// todo: abstract getter\n\tabstract allAssignees(): Array<LocalDeclare>\n}\n\n/** `{assignee} =/:=/::= {value}` */\nexport class AssignSingle extends Assign {\n\t/** Assign to `_`. */\n\tstatic focus(loc: Loc, value: Val): AssignSingle {\n\t\treturn new AssignSingle(loc, LocalDeclare.focus(loc), value)\n\t}\n\n\tconstructor(loc: Loc, public assignee: LocalDeclare, public value: Val) {\n\t\tsuper(loc)\n\t}\n\n\t/** @override */\n\tallAssignees(): Array<LocalDeclare> {\n\t\treturn [this.assignee]\n\t}\n}\n\n/** `{assignees} =/:=/::= {value}` */\nexport class AssignDestructure extends Assign {\n\tconstructor(loc: Loc, public assignees: Array<LocalDeclare>, public value: Val) {\n\t\tsuper(loc)\n\t}\n\n\t/** Kind of locals this assigns to. */\n\tget kind(): LocalDeclares {\n\t\treturn this.assignees[0].kind\n\t}\n\n\t/** @override */\n\tallAssignees(): Array<LocalDeclare> {\n\t\treturn this.assignees\n\t}\n}\n"],"sourceRoot":"/source/"}